// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime
  image String?
  imageCode String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coversationIds String[] @db.ObjectId
  coversations Conversation[] @relation(fields: [coversationIds], references: [id])
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("seen",fields: [seenMessageIds], references: [id])
  accounts Account[]
  messages Message[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refreshToken String? @db.String
  accessToken String? @db.String
  expiresAt Int?
  tokenType String?
  scope String?
  idToken String? @db.String
  sessionState String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  messagesIds String[] @db.ObjectId
  messages Message[]
  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())
  seenIds String[] @db.ObjectId
  seen User[] @relation("seen", fields: [seenIds], references: [id])
  coversationId String @db.ObjectId
  conversation Conversation @relation(fields: [coversationId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
